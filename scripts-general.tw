:: Continue Button [widget]
/% Syntax:
    <<segue [passage name]>>  %/\
<<widget "segue">>\
    /%<<if tale.get(state.active.title).tags.indexOf("nosave") eq -1 >> %/\
        <<script>>
            var passage = state.active.variables.args[0];
            ga('send', 'event', 'passage', 'loaded', state.active.title);
            var el = document.createElement("a");
            if (passage !== null) {
                $(el).attr("data-passage", passage)
                    .addClass("continue-link")
                    .addClass(tale.has(passage) ? "link-internal" : "link-broken")
                    .html("<span class='continue-button'>Continue<span class='onward-arrow fade-bounce'>&raquo;</span></span>")
                    .click(function () {
                        state.display(passage, el);
                    });
            }
            this.output.appendChild(el);
        <</script>>
        <<if $index[state.active.title].enumeration gt 1>>\
            <<if tale.get(state.active.title).tags.indexOf("sidebar") eq -1>>\
                &nbsp; &nbsp;<h6 class='page-back-link'><<click "Previous">><<prevPassage>><</click>></h6>\
            <<elseif state.length gt 1>>\
                <<set $temp to state.peek(1).title>>\
                &nbsp; &nbsp;<h6 class="sidebar page-back-link">[['Back to "' + state.peek(1).title + '"'|$temp]]</h6>\
            <<else>>\
                /%Fallback for finding the passage\
                before the current sidebar when state fails%/\
                &nbsp; &nbsp;<h6 class='page-back-link'><<click "Back">><<prevPassage 0>><</click>></h6>\
            <</if>>\
        <</if>>\
    /% <</if>> %/\
<</widget>>\

:: Find Previous Passage [script]
/* Syntax:
    <<prevPassage [optional offset]>>

    - The offset indicates how many steps backward to look
      for the previous passage. Default is 1, of course.
      Passing in 0 will look for the passage that linked
      to the current sidebar, if the reader is on a sidebar.
*/
(function () {
    macros.add("prevPassage", {
        version: {
            major: 1,
            minor: 0,
            revision: 0
        },
        handler: function () {
            try {
                var index = state.active.variables.index;
                var current = index[state.active.title].enumeration;
                if (current < 1) {return this.error("already at the first passage");}
                var offset = 1;
                if (this.args.length > 0) {
                    offset = parseInt(this.args[0]);
                    if (this.args[0] !== offset) {return this.error("supplied parameter must be an integer");}
                }
                for (var key in index) {
                    if (index[key].enumeration === current - offset) {
                        if (tale.get(key).tags.indexOf("sidebar") !== -1) {
                            continue;
                        }
                        state.display(key);
                        break;
                    }
                } 
            } 
            catch (e) {
                return this.error(e.message);
            }
        }
    });
}());


:: Inline head [widget]
/% Syntax:
    <<$- [text] [optional: ending punctuation]>>%/\
<<widget "$-">>\
    <span class='inline-head'><<print $args[0]>><<if $args.length > 1>><<print $args[1]>><<else>>.<<endif>></span>\
<</widget>>\ 


:: Goto Passage [script]
/* Syntax:
    <<goto [passage name]>>  */
(function () {
    macros.add("goto", {
        version: {
            major: 1,
            minor: 0,
            revision: 0
        },
        handler: function () {
            try {
                state.display(this.args[0]); 
            } 
            catch (e) {
                return this.error("Go to passage: " + e.message);
            }
        }
    });
}());


:: Sidebar Stack [script]
/* Syntax:
    <<sidebar-box [optional:text to replace "More"]>>
        [[Link text|Passage Name]]
        ...
    <</sidebar-box>> */
macros.add("sidebar-box", {
    version: { major: 1, minor: 0, revision: 0 },
    tags: null,
    handler: function ()
    {
        if (this.payload.length !== 0)
        {
            // create the basic elements
            var   sidebar = document.createElement("div")
                , header  = document.createElement("div")
                , links   = document.createElement("ul");

            // setup the basic elements
            sidebar.className = this.name;
            header.className  = "sidebar-head";
            header.innerHTML  = this.args.length !== 0 ? this.args[0] : "More";
            links.className   = "sidebar-links";
            sidebar.appendChild(header);
            sidebar.appendChild(links);

            // process the payload
            var wikitext = this.payload[0].contents.trim().split(/\s*\n\s*/);
            for (var i = 0; i < wikitext.length; i++)
            {
                var linkEl = document.createElement("li");
                new Wikifier(linkEl, wikitext[i]);
                links.appendChild(linkEl);
            }

            // append the sidebar to the output buffer
            this.output.appendChild(sidebar);
        }
    }
});


:: Sidebar Title [widget]
/% Syntax:
    <<sidebar [text]>> %/\
<<widget "sidebar">>\
    <hr class="sidebar">\
    <h4 class="sidebar">Additional Information</h4>\
    <h1 class="sidebar"><<print $args[0]>></h1>\
    <hr class="sidebar">\
    <<if state.length gt 1>>\
        <<set $temp to state.peek(1).title>>\
        <h6 class="sidebar page-back-link">[['Back to "' + state.peek(1).title + '"'|$temp]]</h6>
    <</if>>\
<</widget>>\


:: Image with Caption [widget]
/% Syntax:
       <<figure [image url] 
                [caption text]
                [optional: "left" or "right", to float figure container; other classes could be given here as well]>>  %/\
<<widget "figure">>\
    <<script>>
        (function () {
            var url = "";
            url = state.active.variables.args[0];
            var text = "";
            text = state.active.variables.args[1];
            var positioning = "";
            positioning = state.active.variables.args[2].length ? state.active.variables.args[2] : "";
            var container = insertElement( 
                output, 
                "figure", 
                "", 
                positioning 
            );
            var image = insertElement(
                container,
                "img"
            );
            var figurecaption = insertElement(
                container,
                "figcaption",
                "",
                "",
                text
            );
            image.src = url;
        }());
    <</script>>\
<</widget>>\


:: External Script Loader [script]
//adapted from http://videlais.com/2013/03/05/twine-tuesday-loading-external-javascript/
(function () {
    macros.add("loadJS", {
        version: {
            major: 1,
            minor: 0,
            revision: 0
        },
        handler: function () {
            try {
                var se = document.createElement("script");
                se.type = 'text/javascript';
                se.src = this.args[0];
                $("head").append(se);
                if(se.innerText) {eval(se.innerText);}
                else {eval(se.textContent);} 
            } 
            catch (e) {
                return this.error("LoadJS: " + e.message);
            }
        }
    });
}());



:: Go To Link On Timer [script]
(function () {
    version.extensions.timedgotoMacro = {
        major: 1,
        minor: 2,
        revision: 0
    };
    macros["goto"] = macros.timedgoto = {
        timer: null,
        handler: function (a, b, c, d) {
            function cssTimeUnit(s) {
                if (typeof s == "string") {
                    if (s.slice(-2).toLowerCase() == "ms") {
                        return +(s.slice(0, -2)) || 0
                    } else {
                        if (s.slice(-1).toLowerCase() == "s") {
                            return +(s.slice(0, -1)) * 1000 || 0
                        }
                    }
                }
                throwError(a, s + " isn't a CSS time unit");
                return 0
            }
            var t, d, m, s;
            t = c[c.length - 1];
            d = d.fullArgs();
            m = 0;
            if (b != "goto") {
                d = d.slice(0, d.lastIndexOf(t));
                m = cssTimeUnit(t)
            }
            d = eval(Wikifier.parse(d));
            if (d + "" && state && state.init) {
                if (macros["goto"].timer) {
                    clearTimeout(macros["goto"].timer)
                }
                //s = state.history[0].passage.title;
                macros["goto"].timer = setTimeout(function () {
                    state.display(d, a);
                }, m)
            }
        }
    };
}());