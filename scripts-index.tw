:: Reset index [widget]
<<widget "contents">>\
	<<set $index to {}>>
	<<set $backgrounds to {}>>
    <<set $tags to []>>
    <<set $bookmarks to {}>>
    <<set $fullindex to []>>
    <<set $totalPassages to 0>>
<</widget>>

:: Section record [script]
(function () {
    macros.add("section", {
        version: {
            major: 1,
            minor: 0,
            revision: 0
        },
        handler: function () {
            try {
                var backgrounds = state.active.variables.backgrounds;
                var sectionName = "";
                var tagName = "";
                var url = "";
                if (this.args[2].length < 1) {throw sectionName + ": Supply a section name, a tag name, and the path to a background image.";}
                sectionName = this.args[0];
                tagName = this.args[1];
                url = this.args[2];
                if (!backgrounds.hasOwnProperty(tagName)) {
                    backgrounds[tagName] = {};
                }
                backgrounds[tagName].section = sectionName;
                backgrounds[tagName].url = url;
            } catch(e) {
                return this.error("Error: " + e.message);
            }
        }
    });

    macros.add("create-index", {
        version: {
            major: 1,
            minor: 0,
            revision: 0
        },
        handler: function () {
            try {
            	var index = state.active.variables.index;
                var backgrounds = state.active.variables.backgrounds;
                var bookmarks = state.active.variables.bookmarks;
                state.active.variables.tags = Object.getOwnPropertyNames(backgrounds);
                //console.log(backgrounds);
                var sectionName = "";
                var tagName = "";
                var url = "";
                var text = '';
                var num = -1;
                //console.log("Tags: " + state.active.variables.tags);
                for(var i in backgrounds) {
					if (backgrounds.hasOwnProperty(i)) {
						num++;
						tagName = i;
						backgrounds[i].enumeration = num;
						$("#store-area div").each(function() {
							if ($(this).attr("tags").indexOf(i) > -1) {
								var passageName = $(this).attr("tiddler");
								//console.log("Found passage: " + passageName);
								if (!index.hasOwnProperty(passageName)) {
									index[passageName] = {};
									index[passageName].tag = tagName;
									index[passageName].section = backgrounds[i].section;
									index[passageName].url = backgrounds[i].url;
									index[passageName].enumeration = backgrounds[i].enumeration;
                                    index[passageName].seconds = 0;
                                    index[passageName].sidebar = tags(passageName).contains("sidebar");
								}
                                if ($(this).attr("tags").indexOf("bookmark") > -1) {
                                    if (!bookmarks.hasOwnProperty(tagName)) {
                                        bookmarks[tagName] = "";
                                    }
                                    bookmarks[tagName] = passageName;
                                }
							}
						});
					}
				}
                //console.log("Backgrounds");
                //console.log(backgrounds);
                //console.log("Bookmarks");
                //console.log(bookmarks);

                //Build the full index by "reading" the full presentation in order
                var fullindex = state.active.variables.fullindex;
                var seek = state.active.variables.first;
                var lastTag = "";
                var count = -1;
                while(seek !== null) {
                    $("#store-area div").each(function() {
                        if ($(this).attr("tiddler") === seek) {
                            for(tagName in backgrounds) {
                                //console.log("Exploring section: " + tagName + "...");
                                if ($(this).attr("tags") && $(this).attr("tags").indexOf(tagName) > -1 ) {
                                    if (tagName !== lastTag) {
                                        count++;
                                        lastTag = tagName;
                                        fullindex.push({});
                                    }
                                    //console.log("fullindex.length = "+fullindex.length+ ", count: "+ count);
                                    if (fullindex.length < count + 2) {
                                        //console.log("Looking to add " + $(this).attr("tiddler") + " to fullindex");
                                        if (!fullindex[count].hasOwnProperty("section")) {
                                            //console.log("   Looking to add section.");
                                            fullindex[count].section = backgrounds[tagName].section;
                                        }
                                        if (!fullindex[count].hasOwnProperty("passages")) {
                                            //console.log("   Looking to add passages.");
                                            fullindex[count].passages = [];
                                        }
                                        var passageStore = { passage: $(this).attr("tiddler") };
                                        //console.log("   Looking to add sidebars.");
                                        var sidebars = $(this).text().match(/&lt;&lt;\s*sidebar-box(?:\s*.*?)&gt;&gt;([\s\S]*?)&lt;&lt;\s*\/sidebar\-box\s*&gt;&gt;/g);
                                        if (sidebars !== null) {
                                            var sidebarStore = [];
                                            var sought = /\[\[\s*.*?\|(.*?)\s*\]\]/g;
                                            while ((seek = sought.exec(sidebars[0])) !== null) {
                                                sidebarStore.push(seek[1]);
                                            }
                                            passageStore.sidebars = sidebarStore;
                                            //console.log("   Found sidebars: " + sidebarStore.length);
                                        }
                                        fullindex[count].passages.push(passageStore);
                                        //console.log(fullindex);
                                    }
                                    
                                    break;
                                }
                            }
                            seek = (/&lt;&lt;\s*segue\s+["'](.*?)["']\s*&gt;&gt;/g).exec($(this).text());
                            if (seek != null) {
                                seek = seek[1]; 
                            }
                            return false;
                        }
                    });

                    
                }
            
            //console.log(fullindex);

            //In the $index, number each passage so that we can quickly
            //identify where we are for the progress meter.
            count = 0;
            $.each(fullindex, function(i, part){
                if (part.passages.length > 0) {
                    $.each(part.passages, function(j, group) {
                        count ++;
                        index[group.passage].enumeration = count;
                        if (group.hasOwnProperty("sidebars")) {
                            $.each(group.sidebars, function(k, sides) {
                                //console.log("Enumerating " + sides);
                                index[sides].enumeration = count;
                            })
                        }
                    });
                }
            });
            //console.log("Index");
            //console.log(index);
            
            state.active.variables.totalPassages = count;

            } catch(e) {
                return this.error("Error: " + e.message);
            }
        }
    });                
}());