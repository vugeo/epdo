:: PassageDone [nobr]
/% Runs once the passage has completely rendered. %/
<<if options.autoplay>>
    <<autoplay $autoplaySound $autoplayDestination>>
<</if>>
<<script>>
    var index = state.active.variables.index;
    var passage = state.active.title;
    //console.log("passage: " + passage);
    var currentPassage = index[passage];
    var passageTags = state.active.variables.tags;
    var sections = state.active.variables.backgrounds;
    var bookmarks = state.active.variables.bookmarks;
    var fullindex = state.active.variables.fullindex;
    var currentTag = passageTags.indexOf(currentPassage.tag);
    
    var totalPassages = state.active.variables.totalPassages;
    //console.log("current tag: " + currentTag + ", no. " + currentPassage.tag);

    var progress = 0;

    if (currentPassage.hasOwnProperty("enumeration")) {
        //The progress marker will appear halfway through the imaginary rectangle
        //of each passage on the progress meter, except for the last, where we
        //show it completely filling the bar.
        var progress = currentPassage.enumeration;
        if (progress > options.passageprogress) { options.passageprogress = progress; }
        if (progress !== totalPassages) { progress = progress - 0.5; }
    }
    //else if (currentTag < 1) {
        //progress = 0;
    //}
    //console.log("Current passage: " + progress + " of " + totalPassages);
    var progressPercent = (progress / totalPassages)* 100;
    $("#pb-complete").css("right", 100 - progressPercent + "%");
    if (state.active.variables.csscalc === true) {
        $("#pb-position").css("left", "calc(" + progressPercent + "% - 2px)");
    }
    else { //if CSS calc() isn't supported, we don't try to be as exact
        $("#pb-position").css("left", progressPercent + "%");
    }
    //console.log("Set #pb-complete right to: " + (100 - (progress / totalPassages)* 100) + "%");
    //console.log("Set #pb-position left to: " + (progress / totalPassages)* 100 + "%");

    $("#pb-complete,#pb-position").css("display", progressPercent > 0 ? "block" : "none");

    if (currentTag > 0) { //the user has read enough to need to see the chapter button
        if (currentTag > options.chapterprogress) {
                setOption("chapterprogress", currentTag);
                $("#menu-button").addClass("hilight");
                setTimeout(function() {
                    $("#menu-button").removeClass("hilight");
                }, 1100);
            }
        //console.log("current tag: " + currentTag);

        $("#nav-container").html(function(){
            var html = "<ul class='chapter-list'>";
            for (var i = 1; i < (options.chapterprogress + 1); i++) {
                html += "<li><a class='chapter-list" + (i === currentTag ? " active" : "") + "' data='" + bookmarks[passageTags[i]] + "'>" + sections[passageTags[i]].section + "</a><ul class='passage-list'>";
                    $.each(fullindex[i-1].passages, function(j, pass) {
                        //console.log("Adding " + pass.passage + " to menu: " + index[pass.passage].enumeration + "/" + progress);
                        if (pass.passage === state.active.title) {
                            html += "<li class='inactive'><a class='passage-list passage-list-inactive' data='" + pass.passage + "'>" + pass.passage + "</a>";
                        }
                        else {
                            html += "<li><a class='passage-list' data='" + pass.passage + "'>" + pass.passage + "</a>";
                        }
                        if (pass.hasOwnProperty("sidebars")) {
                            pass.sidebars.forEach (function (side) {
                                html += "<p class='sidebar-list'><a class='index-passage' data='" + side + "'>" + side + "</a></p>";
                            });
                        }
                        html += "</li>";
                        if (index[pass.passage].enumeration === options.passageprogress) {return false; }
                    });
                html += "</ul></li>";
            }
            html+="</ul></div>";
            return html;
        });
        $("#nav-container a.chapter-list").off().on("click", function(){
            var $this = $(this);
            $("#nav-container ul.passage-list").not($this.siblings()).slideUp(200);
            $this.next("ul").slideToggle(200);
        });
        $("a.passage-list, a.index-passage").off().click(function(){
            var passage = $(this).attr("data");
            if (passage !== state.active.title) {
                if (typeof ga != "undefined") {
                    ga('send', 'event', 'help', 'index', 'navigated to ' + passage + ' using index');
                }
                state.display(passage);
                snapper.close();
            }
            return false;
        });
        //show the current section on opening the drawer
        $("a.chapter-list.active").next("ul").slideDown(200);
    }
    if (index.hasOwnProperty(passage)) { //skip this for passages that aren't in the index
        //update image if necessary
        var currentImage = getBackgroundImage(".img-anchor");
        var url = currentPassage.url;
        url = url.substring(url.lastIndexOf('/', url.lastIndexOf('/') - 1) + 1);
        if (url !== currentImage) { //Background image changing is proxy for section change
            // First, animate the section name change
            $("#section-name").html(currentPassage.section).addClass("hilight");
            setTimeout(function() {
                $("#section-name").removeClass("hilight");
            }, 1100);

            // Next, change the background image
            var $active = $(".img-anchor");
            var $passive = $(".img-fader");
            $(".img-container").toggleClass('img-anchor img-fader');
            $passive.css("background-image", "url(" + url + ")");
            $passive.removeClass('background-fade');
            $active.addClass("background-fade");
            //look for next tag: if there is one, cache its background image
            var nextTag = passageTags.indexOf(currentTag) + 1;
            if (nextTag < passageTags.length) {
                setTimeout(function() {
                    var nextUrl = sections[passageTags[nextTag]].url;
                    $active.css("background-image", "url(" + nextUrl + ")");
                }, 1100);
            }
        }
    }

    passage = tale.get(state.active.title);
    if (passage.tags.indexOf("sidebar") === -1 && $("#passages").hasClass("sidebar")) {
        //we are going from a sidebar to the main flow of the presentation
        passage.classes.purge("flip");
        $("#passages").removeClass("sidebar");
    }
    else if (!$("#passages").hasClass("sidebar")) {
        $(".passage").removeClass("flip");
    }

    // Display for controls
    if (!tags().contains("nosave") && $("#custom").is(":hidden")) {
        $("#custom").slideDown("fast");
    }
    else if (tags().contains("nosave")) {
        $("#custom").slideUp("fast");
    }
    if (typeof customScroll != "undefined") {
        setTimeout(function () {
            customScroll.refresh();
            customScroll.scrollTo(0, 0);// Android in particular doesn't rescroll properly
        }, 300);
    }
<</script>>
<<if state.active.title eq "Index">>
    <<displayIndex>>
    <<script>>
        // Once the user reaches the index, we want her to be able to
        // be able to bookmark the page and return. So, we replace
        // the URL to allow that.
        var query = window.location.search.substring(1);
        var locus = "nav=Index";
        if (query.length > 0) {
            if (query.search(/nav=/) != -1) {
                query = query.replace(/nav=.*?(?=&|$)/, locus);
            }
            else {
                query += "&" + locus;
            }
        }
        else {
            query = locus;
        }
        if (config.historyMode === HistoryMode.Hash) {
            window.location.replace(
                window.location.protocol + "//" + window.location.host
                + window.location.pathname
                + "?" + query
                + window.location.hash
            );
        } else {
            window.history.replaceState(
                window.history.state,
                document.title,
                window.location.protocol + "//" + window.location.host + window.location.pathname
                + "?" + query
            );
        }
    <</script>>
<</if>>
<<if $admin eq "true">>
    <<displayAdmin>>
<</if>>\